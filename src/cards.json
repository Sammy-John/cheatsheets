[
    {
      "id": "syntax-using-system",
      "topic": "Syntax",
      "category": "Imports",
      "title": "using System;",
      "description": "Includes core system functionality such as Console, Math, String, etc.",
      "code": "using System;\n\nConsole.WriteLine(\"Hello, World!\");",
      "tags": ["syntax", "using", "core"]
    },
    {
      "id": "syntax-using-system-collections-generic",
      "topic": "Syntax",
      "category": "Imports",
      "title": "using System.Collections.Generic;",
      "description": "Enables usage of generic collections like List<T>, Dictionary<TKey, TValue>.",
      "code": "using System.Collections.Generic;\n\nList<string> names = new List<string>();",
      "tags": ["syntax", "using", "collections"]
    },
    {
      "id": "syntax-using-system-linq",
      "topic": "Syntax",
      "category": "Imports",
      "title": "using System.Linq;",
      "description": "Provides LINQ functionality to query collections using a functional approach.",
      "code": "using System.Linq;\n\nvar evenNumbers = numbers.Where(n => n % 2 == 0);",
      "tags": ["syntax", "using", "linq"]
    },
    {
      "id": "syntax-using-system-text",
      "topic": "Syntax",
      "category": "Imports",
      "title": "using System.Text;",
      "description": "Gives access to classes for string encoding and StringBuilder.",
      "code": "using System.Text;\n\nStringBuilder sb = new StringBuilder();",
      "tags": ["syntax", "using", "string"]
    },
    {
      "id": "syntax-using-system-threading",
      "topic": "Syntax",
      "category": "Imports",
      "title": "using System.Threading;",
      "description": "Provides classes and methods for multithreading.",
      "code": "using System.Threading;\n\nThread.Sleep(1000);",
      "tags": ["syntax", "using", "threads"]
    },
    {
      "id": "syntax-using-system-io",
      "topic": "Syntax",
      "category": "Imports",
      "title": "using System.IO;",
      "description": "Used for file and stream I/O operations.",
      "code": "using System.IO;\n\nFile.WriteAllText(\"file.txt\", \"Hello\");",
      "tags": ["syntax", "using", "io"]
    },
      {
        "id": "syntax-namespace-declaration",
        "topic": "Syntax",
        "category": "Program Structure",
        "title": "namespace Declaration",
        "description": "Defines a scope to group related classes and avoid naming conflicts.",
        "code": "namespace MyApplication\n{\n    public class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello from MyApplication!\");\n        }\n    }\n}",
        "tags": ["syntax", "structure", "namespace"]
      },
      {
        "id": "syntax-class-declaration",
        "topic": "Syntax",
        "category": "Program Structure",
        "title": "class Declaration",
        "description": "Defines a class as the core building block of a C# program. Can contain methods, properties, and fields.",
        "code": "public class Calculator\n{\n    public int Add(int a, int b)\n    {\n        return a + b;\n    }\n}",
        "tags": ["syntax", "structure", "class"]
      },
      {
        "id": "syntax-entry-point-main-method",
        "topic": "Syntax",
        "category": "Program Structure",
        "title": "Entry Point: static void Main(string[] args)",
        "description": "The starting point of a C# console application. Executes when the program runs.",
        "code": "static void Main(string[] args)\n{\n    Console.WriteLine(\"Welcome to the program!\");\n}",
        "tags": ["syntax", "structure", "entry point", "main"]
      },
      {
        "id": "syntax-method-declaration",
        "topic": "Syntax",
        "category": "Program Structure",
        "title": "Method Declaration",
        "description": "Defines a reusable block of code. Includes access modifiers, return type, method name, and parameters.",
        "code": "public void GreetUser(string name)\n{\n    Console.WriteLine($\"Hello, {name}!\");\n}",
        "tags": ["syntax", "structure", "method", "function"]
      },
      {
        "id": "syntax-static-method-declaration",
        "topic": "Syntax",
        "category": "Program Structure",
        "title": "Static Method Declaration",
        "description": "A method that belongs to the class itself rather than to instances of the class.",
        "code": "public static int Square(int number)\n{\n    return number * number;\n}",
        "tags": ["syntax", "structure", "method", "static"]
      },
        {
          "id": "syntax-if-statement",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "if Statement",
          "description": "Executes a block of code if a specified condition is true.",
          "code": "if (score >= 50)\n{\n    Console.WriteLine(\"You passed!\");\n}",
          "tags": ["syntax", "control flow", "if", "conditional"]
        },
        {
          "id": "syntax-if-else-statement",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "if-else Statement",
          "description": "Executes one block of code if the condition is true, another block if the condition is false.",
          "code": "if (score >= 50)\n{\n    Console.WriteLine(\"You passed!\");\n}\nelse\n{\n    Console.WriteLine(\"You failed.\");\n}",
          "tags": ["syntax", "control flow", "if", "else", "conditional"]
        },
        {
          "id": "syntax-else-if-statement",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "else-if Ladder",
          "description": "Checks multiple conditions in sequence and executes the first true block.",
          "code": "if (score >= 90)\n{\n    Console.WriteLine(\"Grade: A\");\n}\nelse if (score >= 80)\n{\n    Console.WriteLine(\"Grade: B\");\n}\nelse\n{\n    Console.WriteLine(\"Grade: C or below\");\n}",
          "tags": ["syntax", "control flow", "if", "else if", "conditional"]
        },
        {
          "id": "syntax-switch-statement",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "switch Statement",
          "description": "Selects one of many code blocks to be executed based on a matching value.",
          "code": "switch (day)\n{\n    case \"Monday\":\n        Console.WriteLine(\"Start of the week!\");\n        break;\n    case \"Friday\":\n        Console.WriteLine(\"Weekend is near!\");\n        break;\n    default:\n        Console.WriteLine(\"Just another day.\");\n        break;\n}",
          "tags": ["syntax", "control flow", "switch", "conditional"]
        },
        {
          "id": "syntax-for-loop",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "for Loop",
          "description": "Executes a block of code a specific number of times.",
          "code": "for (int i = 0; i < 5; i++)\n{\n    Console.WriteLine($\"Iteration {i}\");\n}",
          "tags": ["syntax", "control flow", "loop", "for"]
        },
        {
          "id": "syntax-while-loop",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "while Loop",
          "description": "Repeats a block of code while a specified condition is true.",
          "code": "int count = 0;\nwhile (count < 3)\n{\n    Console.WriteLine($\"Count: {count}\");\n    count++;\n}",
          "tags": ["syntax", "control flow", "loop", "while"]
        },
        {
          "id": "syntax-do-while-loop",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "do-while Loop",
          "description": "Similar to a while loop, but guarantees the block runs at least once.",
          "code": "int number;\ndo\n{\n    Console.Write(\"Enter a number (0 to stop): \");\n    number = int.Parse(Console.ReadLine());\n} while (number != 0);",
          "tags": ["syntax", "control flow", "loop", "do while"]
        },
        {
          "id": "syntax-foreach-loop",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "foreach Loop",
          "description": "Iterates over each element in a collection or array.",
          "code": "string[] fruits = {\"Apple\", \"Banana\", \"Cherry\"};\nforeach (string fruit in fruits)\n{\n    Console.WriteLine(fruit);\n}",
          "tags": ["syntax", "control flow", "loop", "foreach"]
        },
        {
          "id": "syntax-break-statement",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "break Statement",
          "description": "Terminates the closest enclosing loop or switch statement immediately.",
          "code": "for (int i = 0; i < 10; i++)\n{\n    if (i == 5)\n    {\n        break;\n    }\n    Console.WriteLine(i);\n}",
          "tags": ["syntax", "control flow", "break", "loop"]
        },
        {
          "id": "syntax-continue-statement",
          "topic": "Syntax",
          "category": "Control Flow",
          "title": "continue Statement",
          "description": "Skips the current iteration of a loop and continues with the next iteration.",
          "code": "for (int i = 0; i < 5; i++)\n{\n    if (i == 2)\n    {\n        continue;\n    }\n    Console.WriteLine(i);\n}",
          "tags": ["syntax", "control flow", "continue", "loop"]
        }
    ]
    
  
  